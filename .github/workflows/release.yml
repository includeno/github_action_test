# https://docs.github.com/en/actions/guides
# CI name , it will display on github's action page menu
name: Github Action Release ---- Python Flask
# trigger on which this CI should be run
on: # push operation is operate
  push:
    # here since my repository branch is named `main` , you should follow your own repository like `master`
    branches: [python_flask]
# CI enviroment settings
env:
  RELEASE_VERSION: "1.0" # version
  TAG_NAME: "github_action_test_python" #tag 只能小写开头
jobs:
  build:
    name: Github Action Release ---- Python Flask
    runs-on: ubuntu-latest # use latest ubuntu to run the job
    strategy:
      matrix:
        python-version: [ '3.9.7' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2 #https://github.com/actions/setup-python
        with:
          python-version: ${{ matrix.python-version }} # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      #zip the project files
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip -q -r python_v${{ env.RELEASE_VERSION}}-production.zip .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1 #https://github.com/actions/create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: python_v${{ env.RELEASE_VERSION }}
          release_name: python_v${{ env.RELEASE_VERSION }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1 #https://github.com/actions/upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: python_v${{ env.RELEASE_VERSION}}-production.zip
          asset_name: python_v${{ env.RELEASE_VERSION}}-production.zip
          asset_content_type: application/zip